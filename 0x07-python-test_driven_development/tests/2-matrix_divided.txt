===============================
 How to Use 2-matrix_divided.py
===============================

This library is very simple, since it only has one function called
``matrix_divided(matrix, div)``.

Numbers
=======

``matrix_divided(matrix, div)`` returns a new matrice containing the result
of dividing the element of the input matrice by the given value.

::

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	... [1, 2, 3],
	... [4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

the size of each row must be the same.

::

	>>> matrix = [
        ... [1, 2, 3],
        ... [3, 4, 5, 6]
        ... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
 		File "<stdin>", line 1, in <module>
  		File "<stdin>", line 10, in matrix_divided
	TypeError: Each row of the matrix must have the same size

div must be an integer or float.

::

	>>> matrix = [
        ... [1, 2, 3],
        ... [4, 5, 6]
        ... ]
	>>> print(matrix_divided(matrix, "error"))
	Traceback (most recent call last):
  		File "<stdin>", line 1, in <module>
  		File "<stdin>", line 12, in matrix_divided
	TypeError: div must be a number

div must not be equal to 0.

::

	>>> matrix = [
        ... [1, 2, 3],
        ... [4, 5, 6]
        ... ]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
  		File "<stdin>", line 1, in <module>
  		File "<stdin>", line 14, in matrix_divided
	ZeroDivisionError: division by zero

the elements must be numbers.

::
	>>> matrix = [
	... [1, 2, "life"],
	... [4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
  		File "<stdin>", line 1, in <module>
  		File "<stdin>", line 11, in matrix_divided
	TypeError: matrix must be a matrix (list of lists) of integers/floats
